//#pragma comment(lib, "ws2_32.lib")
#include <stdio.h>
#include <string.h>
#include <winsock2.h>
#include <windows.h>
#include <iostream>
#include <string>
#include<math.h>
#include<ctime>
#define PORT 301
#define Bufer 100
#define SERVERADDR "127.0.0.1"


SOCKET my_sock;

char name[24];


DWORD WINAPI ToServet(LPVOID client_socket) {
	char bufff[Bufer];


	while (1) {

		for (int i = 0; i < Bufer; i++) {
			bufff[i] = '\0';
		}

		int nsize = recv(((SOCKET*)client_socket)[0], &bufff[0], sizeof(bufff)-30, 0);

		bufff[nsize] = 0;

		printf(bufff);

		
	}
	

	return 0;
}



int main(int argc, char* argv[])
{

	setlocale(LC_ALL, "Russian");
	srand(time(0));
	char buff[Bufer];
	

	printf("TCP Клиент\n");

	if (WSAStartup(0x202, (WSADATA*)&buff[0]))
	{
		printf("WSAStart error %d\n", WSAGetLastError());
		return -1;
	}

	for (int i = 0; i < Bufer; i++) {
		buff[i] = '\0';
	}

	my_sock = socket(AF_INET, SOCK_STREAM, 0);
	if (my_sock < 0)
	{
		printf("Socket() error %d\n", WSAGetLastError());
		return -1;
	}

	sockaddr_in dest_addr;
	dest_addr.sin_family = AF_INET;
	dest_addr.sin_port = htons(PORT);
	HOSTENT* hst;

	if (inet_addr(SERVERADDR) != INADDR_NONE)
		dest_addr.sin_addr.s_addr = inet_addr(SERVERADDR);
	else

		if (hst = gethostbyname(SERVERADDR))

			((unsigned long*)&dest_addr.sin_addr)[0] =
			((unsigned long**)hst->h_addr_list)[0][0];
		else
		{
			printf("Invalid address %s\n", SERVERADDR);
			closesocket(my_sock);
			WSACleanup();
			return -1;
		}

	if (connect(my_sock, (sockaddr*)&dest_addr, sizeof(dest_addr)))
	{
		printf("Connect error %d\n", WSAGetLastError());
		return -1;
	}


	printf("Соединение с %s успешно установлено\n\ Введите quit для выхода\n\n", SERVERADDR);

	DWORD thID;
	CreateThread(NULL, NULL, ToServet, &my_sock, NULL, NULL);
	int nsize;

	while (1)
	{

	
		printf("Вы:");

		fgets(&buff[0], sizeof(buff) - 1, stdin);

	

	
		if (!strcmp(&buff[0], "quit\n"))
		{
			
			printf("Exit...");
			closesocket(my_sock);
			WSACleanup();
			return 0;
		}
		
		send(my_sock, &buff[0], sizeof(buff) - 1, 0);
		
		
		
	}
	printf("Recv Ошибка %d\n", WSAGetLastError());
	closesocket(my_sock);
	WSACleanup();
	return -1;
}
